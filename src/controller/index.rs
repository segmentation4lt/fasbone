//-----------------------------------------------------------------------------------------------------------------------------------------
// actix_webは取り込むモジュールが異なるので各個呼び出し ※要検証
//-----------------------------------------------------------------------------------------------------------------------------------------
use actix_web::{HttpRequest, HttpResponse,ResponseError};
use thiserror::Error;

//-----------------------------------------------------------------------------------------------------------------------------------------
// COMMON モジュール(SEG4)
//-----------------------------------------------------------------------------------------------------------------------------------------
use crate::base::seg4_common;

//-----------------------------------------------------------------------------------------------------------------------------------------
// DB モジュール
//-----------------------------------------------------------------------------------------------------------------------------------------
use crate::base::db_base;

//-----------------------------------------------------------------------------------------------------------------------------------------
//  business_logicの読み込み
//-----------------------------------------------------------------------------------------------------------------------------------------
pub use crate::business_logic::index;

//-----------------------------------------------------------------------------------------------------------------------------------------
//  action_baseの読み込み
//-----------------------------------------------------------------------------------------------------------------------------------------
use crate::base::action_base;

//-----------------------------------------------------------------------------------------------------------------------------------------
// ResponseError のラッパー宣言。独自のエラー処理に使用
//-----------------------------------------------------------------------------------------------------------------------------------------
#[derive(Error, Debug)]
pub enum MyError {}
impl ResponseError for MyError {}

//-----------------------------------------------------------------------------------------------------------------------------------------
// 画面遷移別個別対応
//-----------------------------------------------------------------------------------------------------------------------------------------
pub async fn execute(
    req: HttpRequest,
) -> Result<HttpResponse, MyError> {
    //-------------------------------------------------------------------------------------------------------------------------------------
    // コントローラの先頭でDBインスタンスを確立
    //-------------------------------------------------------------------------------------------------------------------------------------
    let mut pg_client = db_base::db_connect();

    //---------------------------------------------------------------------------------------------------------------------------------
    //ビジネスロジックの呼び出し ※indexだけ特製。seg4関連のtebleをマイグレーションする。 ※ハンドリングはしない。
    //---------------------------------------------------------------------------------------------------------------------------------
    let _business_logic = index::BusinessLogic::execute(&mut pg_client);

    //-------------------------------------------------------------------------------------------------------------------------------------
    // サーバ関連の初期化
    //-------------------------------------------------------------------------------------------------------------------------------------
    let server_info = action_base::ServerInfomation::set_server_infomation(req,&mut pg_client);
    if server_info.is_debug == true {
        seg4_common::info!(
            "[OK] Reqest Infomation. {},{},{}",serde_json::to_string(&server_info).unwrap(),
            seg4_common::define::JSON_PERMANENT_DIR,seg4_common::define::CGI_PERMANENT_DIR
        );
    }

    //-------------------------------------------------------------------------------------------------------------------------------------
    // 不正アクセスのチェック。post_token_idが空の場合は NotFoundを返却
    //-------------------------------------------------------------------------------------------------------------------------------------
    if server_info.post_token_id == "" || (server_info.reqest_uri == "/private/auth" && server_info.business_login_id < 1) {
        //エラーログ
        seg4_common::info!("● No UUID or unauthorized in the members area, please check reqest_uri. {}",serde_json::to_string(&server_info).unwrap());
        return Ok(HttpResponse::Forbidden()
        .header("Content-Type", seg4_common::HTTP_CONTENT_TYPE)
        .header("Cache-Control", seg4_common::HTTP_CACHE_CONTROL)
        .header("Set-Cookie", server_info.cookie_line)
        .body(seg4_common::FORBIDDEN_ERROR))
    };

    //-------------------------------------------------------------------------------------------------------------------------------------
    //  正常終了時のJSON出力
    //-------------------------------------------------------------------------------------------------------------------------------------
    Ok(HttpResponse::Ok()
    .header("Content-Type", seg4_common::HTTP_CONTENT_TYPE)
    .header("Cache-Control", seg4_common::HTTP_CACHE_CONTROL)
    .header("Set-Cookie", server_info.cookie_line)
    .body(format!("{{\"token\":\"{}\",\"is_private\":\"{}\"}}",
        server_info.post_token_id,if server_info.business_login_id<1{false}else{true})
    )
    )
}
