
//-----------------------------------------------------------------------------------------------------------------------------------------
// execute 処理開始
//-----------------------------------------------------------------------------------------------------------------------------------------
pub async fn execute(
    ### REQEST_METHOD_FORM ###
    req: HttpRequest,
) -> Result<HttpResponse, MyError> {
    //-------------------------------------------------------------------------------------------------------------------------------------
    // ログイン必須ページかどうかをアクション別に設定。 true→誰でも見れる false→ログイン専用
    //-------------------------------------------------------------------------------------------------------------------------------------
    const GUEST_ACCESS_ALLOW: bool = ### GUEST_ACCESS_ALLOW ###;

    //-------------------------------------------------------------------------------------------------------------------------------------
    // 多重登録禁止チェックかどうかをアクション別に設定。 true→必要 false→不要
    //-------------------------------------------------------------------------------------------------------------------------------------
    const UPDATE_EXISTS_ALLOW: bool = ### UPDATE_EXISTS_ALLOW ###;

/*   非共通部 ココマデ  */
    //-------------------------------------------------------------------------------------------------------------------------------------
    // 動的パスを変数化する
    //-------------------------------------------------------------------------------------------------------------------------------------
    ### ParhMemberItarete ###

    //-------------------------------------------------------------------------------------------------------------------------------------
    // コントローラの先頭でDBインスタンスを確立
    //-------------------------------------------------------------------------------------------------------------------------------------
    let mut pg_client = db_base::db_connect();

    //-------------------------------------------------------------------------------------------------------------------------------------
    // サーバ関連の初期化。
    //-------------------------------------------------------------------------------------------------------------------------------------
    let server_info = action_base::ServerInfomation::set_server_infomation(req,&mut pg_client);

    //-------------------------------------------------------------------------------------------------------------------------------------
    // 不正アクセスのチェック。post_token_idが空の場合は NotFoundを返却
    //-------------------------------------------------------------------------------------------------------------------------------------
    if server_info.post_token_id == "" {
        //エラーログ
        seg4_common::info!("● Post UUID is Noting. {}",serde_json::to_string(&server_info).unwrap());
        return Ok(HttpResponse::NotFound()
        .header("Content-Type", seg4_common::HTTP_CONTENT_TYPE)
        .header("Cache-Control", seg4_common::HTTP_CACHE_CONTROL)
        .header("Set-Cookie", server_info.cookie_line)
        .body(seg4_common::NOTFOUND_ERROR))
    };

    //---------------------------------------------------------------------------------------------------------------------------------
    // ログイン中かどうかの判定(sessionはaction、ログインはbusinesslogicで管理)
    //---------------------------------------------------------------------------------------------------------------------------------
    if server_info.business_login_id < 1 && GUEST_ACCESS_ALLOW == false {
        if server_info.business_login_id == -1 {
            return Ok(HttpResponse::Unauthorized()
            .header("Content-Type", seg4_common::HTTP_CONTENT_TYPE)
            .header("Cache-Control", seg4_common::HTTP_CACHE_CONTROL)
            .header("Set-Cookie", server_info.cookie_line)
            .body(seg4_common::NO_LOGIN_ERROR))
        } else {
            //エラーログ
            seg4_common::info!("● Login Check Failed. {}",serde_json::to_string(&server_info).unwrap());
            return Ok(HttpResponse::InternalServerError()
            .header("Content-Type", seg4_common::HTTP_CONTENT_TYPE)
            .header("Cache-Control", seg4_common::HTTP_CACHE_CONTROL)
            .header("Set-Cookie", server_info.cookie_line)
            .body(seg4_common::FOTAL_ERROR))  
        };
    };
    
    //-------------------------------------------------------------------------------------------------------------------------------------
    //  フォームハンドラー関連の初期化
    //-------------------------------------------------------------------------------------------------------------------------------------
    //フォームハンドラーのデータクランプ
    let input_params = seg4_common::HashMap::new();
    //ヴァリテーションチェックの結果保持 (0:正常 5:バリテーションバック 9:ライズエクセプション)
    let mut input_result = seg4_common::HashMap::new();
    //ヴァリテーションバック詳細
    let mut valiback_detail = seg4_common::HashMap::new();

    //-------------------------------------------------------------------------------------------------------------------------------------
    // ステータスチェック 初期値 0→正常 5→バリバック 9→サーバエラー扱い
    //-------------------------------------------------------------------------------------------------------------------------------------
    input_result.insert(String::from("Result"), 0);

    /*   ここから非共通部   */

