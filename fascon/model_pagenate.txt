        //-------------------------------------------------------------------------------------------------------------------------------------
        // オフセットの取得
        //-------------------------------------------------------------------------------------------------------------------------------------
        let modeltest_queryload_stmt = pg_client.prepare_typed(&QUERY_SQL.replace("### WHERE ###",&where_args)
        .replace("### TABLE_NAME ###",&table_name).replace("### ORDER BY ###",&orderby_args)
        .replace("### LIMIT_OFFSET ###",&if content < 1 || page_in < 1 {String::from("")} else{
            LIMIT_OFFSET.to_string()}), &[
                //stmt も F.A.C.Sにて動的に作成 固定は $1:content $2:offsetの順
                ### sql_stmt_pages ###
            ]).unwrap();
        
        // F.A.C.S用にqueryも変数で定義
        let modeltest_queryload_query = pg_client.query(&modeltest_queryload_stmt,&[
            ### sql_exec_pages ###  
        ]).expect("Select Error.");

        //総件数をカウント テーブル名は F.A.C.Sにて生成
        const COUNT_SQL: &str = "select count(*) as count from ### TABLE_NAME ###;";

        //-------------------------------------------------------------------------------------------------------------------------------------
        // 総件数の取得
        //-------------------------------------------------------------------------------------------------------------------------------------
        let record_count_stmt = pg_client.prepare_typed(&COUNT_SQL.replace("### WHERE ###",&where_args).
            replace("### TABLE_NAME ###",&table_name), &[
                ### sql_stmt_no_page ###
            ]).unwrap();
        let record_count_query = pg_client.query_one(&record_count_stmt, &[
                ### sql_exec_no_page ###
            ]);
        let record_count_id : i64 = if record_count_query.is_err() == true {
            -1
        } else{
            match record_count_query.expect("Record Count Chekking Error.").get(0) {
                Some(value) => value,
                None => -1
            }
        };

        //-------------------------------------------------------------------------------------------------------------------------------------
        // マックスページの取得
        //-------------------------------------------------------------------------------------------------------------------------------------
        let max_page = ((record_count_id as f64/ content as f64) as f64).ceil();
        let mut return_strings = String::from("{\"data\":[");
        let mut count :i32 = 0;
        let ptn1 = ",";
        for rows in modeltest_queryload_query.into_iter(){
            let stn :String = rows.get("out");
            return_strings +=format!("{}{}",stn,ptn1).as_str();  
            count +=1;
        }
        if count == 0 {
                return_strings=format!(" {{\"data\":{{}}, \"rows\":0, \"all_rows\":{}, \"max_page\":{}}}",record_count_id,max_page);
        } else {
            return_strings.pop();
            return_strings +=format!("]{} \"all_rows\":{}{} \"max_page\":{}}}",ptn1,record_count_id,ptn1,max_page).as_str();
        };

